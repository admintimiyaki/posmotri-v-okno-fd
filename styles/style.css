*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  block-size: 100%;
}

.page {
  inline-size: 1200px;
  block-size: 100%;
  margin: auto;
  color: #fff;
  font-family: 'Fira Sans Condensed', sans-serif;
  font-size: 18px;
  background-color: #1b1919;

  display: flex; /* TR: 0.1.Задайте флекс для верхнего контейнера .page. */
  align-items: center;
  /* ??AM: Содержимое страницы должно центрироваться не паддингом, а через align-items: center*/
}

h1,
h2,
h3,
h4,
p,
ul,
ol,
li,
blockquote,
fieldset {
  margin: 0;
  padding: 0;
}

ul,
ol {
  list-style: none;
}

/* Кастомный скроллбар */
.custom-scrollbar::-webkit-scrollbar {
  width: 4px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: rgb(217 217 217 / 10%);
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: #D9D9D9;
}


.content{
  /* TR: 0.2.Задайте грид для .content и пропишите grid-area для всех элементов внутри. */
  display: grid;
  margin: 0 auto; /* TR: 1.1.Расположить блок .content посередине .page.*/
  /*TR: 1.2.Расположить элементы .content в строку, прижав к низу вертикальной оси.*/
  grid-template-columns: 711px 399px;
  /* grid-template-rows: 456px 534px; */
  grid-template-areas: "result content__details";
  align-items: end; 
  /*TR: 1.3. Задать горизонтальные размеры .content и отступы между его элементами.*/
  max-width: 1140px;
  gap:30px;
  

}
.search-form{
  /*TR: 1.4 Расположить элементы .search-form в строку, пропорционально распределить между ними свободное пространство и прижать их к началу контейнера.*/
  display: flex;
  gap:40px;
  align-items:start;
  justify-content: space-between;
}
.content__list-container{
  /*TR: 1.5 Установить вертикальный размер для .content__list-container и добавить скролл при переполнении. Скроллбар (полоса прокрутки) скрывать не нужно, он уже стилизован в соответствии с макетом.*/
  height: 298px;
  overflow: auto;
  width: 399px;
  
}


/*TR: 1.6 Растянуть .content__details на всю доступную ширину и высоту контейнера и добавить отступы между заголовком и зоной с карточками.*/
.content__details{
  grid-area: content__details;
  width: 100%;
  /* ??? height: 100%; */
  /*TR: could be position: absolute, then parent container pos: relative*/
  /*TR: could be 100vh height*/
  gap: 30px;
  display:flex;
  flex-direction:column;
  justify-content:space-between;
}

/*2.1 Задайте размеры контейнеру .result__video-container и добавьте отступ снизу.*/
.result__video-container{
  width: 711px; /* TR: could be 100%*/
  height:386px;
  /* отступы ??? */
}

.result__video{
  /*TR: 2.2 Поместите видео в этот контейнер так, чтобы оно занимало всю ширину и высоту и не выходило за пределы. Используйте object-fit.*/
  width: 100%; 
  height: 100%;
  object-fit:cover;
  /* AM: форма оказывается шире видео и вся левая половина не хочет становится ниже 
  Спасибо, Дима Да, тут надо поработать с флекс контейнерами, выравниванием внутри них и растягиванием видео по ширине на 100%*/
} 

/*TR: 2.3 Создайте вертикальные отступы между элементами .content__list-item. Используйте свойство gap.*/
.content__list{
  gap:27px;
  display: flex;
  flex-direction: column;
  padding-top: 2px;
  margin-bottom:30px;

}

/* TR: 2.4 Расположите элементы внутри контейнера .content__video-card в строку, прижав к началу контейнера по дополнительной оси.*/
.content__video-card{
  display:flex;
  flex-direction: row;
  align-items: start; /* ??? */
}
/* TR: 2.5 Задайте размеры .content__video-card-thumbnail и расположите в них изображение так, чтобы оно закрывало весь элемент и было выровнено по центру. Используйте object-fit и object-position.*/
.content__video-card-thumbnail{
  width: 194px;
  height: 103px;
  object-fit: cover;
  object-position: center;

}
/* TR: 2.6 Сделайте так, чтобы .content__video-card-description-container занимал всё доступное пространство (не занятое картинкой). Вам поможет свойство flex-grow.*/
.content__video-card-description-container{
  flex-grow: 1;
  padding-top: 2px;
}

/* TR: 3.1 Оформите текст элементов .search-form__fieldset-title. Обратите внимание на вес шрифта, размер, отступы.*/
.search-form__fieldset-title{
font-weight: 400;
font-size: 18px;
line-height: 22px;
margin-bottom:5px; /* ??? */

}
/* TR: 3.2 Оформите элемент .title и вложенный в него .content__accent. */
.title{
font-family: 'Oswald', sans-serif;
font-weight: 700;
font-size: 75px;
line-height: 94%;
text-transform: uppercase;
}

/* TR: 3.3 Уберите дефолтное подчёркивание и замените цвет текста у ссылки .content__card-link.*/
.content__card-link{
  text-decoration: none;
  color:white;
  display: block; /*test*/
}

/* TR: 3.4 Оформите текст .content__video-card-title и учтите возможность переполнения, заменяя излишний текст на “…”. */
.content__video-card-title{
  width: 196px;
  font-family: 'Oswald', sans-serif;
  font-size: 30px;
  line-height: 100%;
  text-overflow:ellipsis;
  white-space:nowrap;
  overflow: hidden;
  text-transform: uppercase;
  /* content__list-item padding-right: 3px;
  padding-left: 3px; */
}
.content__accent{
  color: #545050;
}

/* TR: 3.5 Обратите внимание на значение line-height для .content__video-card-description в макете. Здесь тоже нужно учесть возможность переполнения, для этого воспользуйтесь свойством line-clamp.*/
.content__video-card-description{/* ночной Белогород */
  line-height: 16px;
  -webkit-line-clamp: 3;
  overflow:hidden;
  max-width: 196px;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  padding-top:6px;
}
.content__list-item{
  padding-left: 3px;
  padding-right: 3px;
}
/* Шаг 4. Стилизуем формы и их состояния
Для работы с элементами формы понадобится паттерн .visually-hidden. С его помощью вам нужно скрыть лишние лейблы и браузерные чекбоксы, чтобы потом нарисовать поверх них свои.
Добавьте в ваш код класс .visually-hidden. В HTML он уже добавлен необходимым элементам. Остались стили. Вот они:*/
.visually-hidden {
  position: absolute;
  inline-size: 1px;
  block-size: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  white-space: nowrap;
}
/* TR: 4.1.1 Создайте с помощью флексбокса строку с двумя элементами — fieldset и кнопкой.*/

/* TR: 4.1.2 Расположите чекбоксы в линию с помощью обёртки .search-form__checkbox-list. Используйте display: flex; и gap.*/
.search-form__checkbox-list{
  display: flex;
  gap: 15px;
  flex-direction: row;
}
/* TR: 4.1.3 Сбросьте border у fieldset. */
fieldset{
  border: 0;
}

/* TR: 4.2.1 Задайте .search-form__label у инпутов для поиска городов и времени суток.*/
/* TR: 4.2.2 Расставьте элементы внутри .search-form__label в линию. Примените свойство display: flex;. Также вам пригодится правило width: fit-content;.*/
.search-form__label{
  display: flex;
  width: fit-content;
  font-family: inherit; 
  color: inherit;
  flex-direction: row;
  align-items: center;
  gap:5px;
}

/* TR: 4.3.1 Задайте стиль текстовому полю.*/
.search-form__textfield{
  color: rgba(255, 255, 255, 0.7);
  background-color: transparent;
  font-family: 'Fira Sans Condensed', sans-serif;
  font-style: normal;
  font-weight: 400;
  font-size: 18px;
  line-height: 22px;
  appearance: none;
  border-width: 1px 0px;
  border-style: solid;
  border-color: #FFFFFF;
  width: 225px;
  appearance: none;
  padding-top: 2.5px;
  padding-bottom: 2.5px;

}
/* TR: 4.3.1 Факультативный шаг. */

.search-form__label:has(:focus-visible){
  outline: 1px solid currentColor;
  outline-offset: 2px;

}

.search-form__textfield:focus{
  outline: none;
}

/* 4.4.1 Добавьте стиль для псевдочекбокса. Задайте стиль для border и выровняйте по центру. Обёртка .search-form__checkbox-list создана специально для того, чтобы выстроить чекбоксы в линию.*/
.search-form__checkbox-list{
  display:flex;
  gap: 15px;
  align-items: center;
}

.search-form__pseudo-checkbox{
  border: 1px solid #FFFFFF;
  height: 18px;
  width: 18px;
  display: flex;
}
/* TR: 4.4.2 & 4.4.3 Добавьте псевдоэлемент ::after. Белый фон, размер задан, как у чек-бокса. Когда будете стилизовать .search-form__pseudo-checkbox, учитывайте, что в нём появится элемент, который должен оказаться точно по центру. В макете внутренний квадрат включённого чек-бокса на один пиксель меньше самого чекбокса.
Когда чекбокс активен (псевдокласс :checked) — отобразите внутри псевдоэлемент, который стилизовали в ::after. */
.search-form__checkbox:checked + .search-form__pseudo-checkbox::after{
  border: 1px solid black;
  background-color: #FFFFFF;
  height: 17px;
  width: 17px;
  content: '';
}
/* TR: 4.4.5 Декорируйте текст — сделайте так, чтобы при наведении на чекбокс у текста появлялось подчёркивание. Обратите внимание, что оно должно появляться при наведении на любую точку лейбла, а не только на сам текст.*/
.search-form__label:has(.search-form__checkbox):hover{
  text-decoration: underline;
  text-underline-offset: 3px;
  text-decoration-thickness: 1px;
  outline-offset: 1px;
}
/* TR: 4.5.1 Сделайте общий класс кнопки. Задайте границу, цвет, шрифт и прозрачный фон.*/
.button {
  font-family: 'Fira Sans Condensed',sans-serif;
  color: inherit;
  border: 1px solid currentColor;
  background-color: transparent;
  font-weight: 700;
  font-size: 18px;
  line-height: 22px;
  height: 34px;
  text-align:center;


}
/* TR: 4.5.2 Пропишите индивидуальные стили для кнопок «Найти» и «Показать ещё». */
/* TR: 4.5.4 Для кнопки «Показать ещё» задайте только размер — так, чтобы она растягивалась на всю ширину контейнера*/
.more-button{
  width: 100%;
  

}
/* TR: 4.5.3 Для кнопки «Найти» задайте положение в конце контейнера и размер. */
.search-form__submit-button{
  width: 194px;
  align-self: end;
}

/* TR: 4.5.5 Стилизуйте состояние кнопок. У всех кнопок на странице три состояния: :hover, :active, :focus-visible. Состояние :focus должно быть сброшено. Эти правила применяются ко всем кнопкам на странице:

1. При наведении — текст подчёркивается.
2. Активная кнопка — задайте цвет согласно макету.
3. Для кнопки в фокусе — появляется обводка, заданная через outline. */

/* TR: 1 text field */
.search-form__textfield:focus{
  outline: none;
 }
 
.search-form__textfield:active{
 outline: 1px solid white;
 outline-width: 1px;
 
}
.search-form__label:has(:focus-visible){
  outline: 1px solid currentColor;
  outline-offset: 2px; 
 
 }
 .search-form__label:has(:hover){
  cursor: pointer;
}
/* .search-form__label:has(.search-form__textfield):focus{
  outline:none;
  border: none;
} */

/* TR: 2 checkbox */
.search-form__checkbox:focus{
  outline: none;
}
/* TR: button 3 */
.search-form__submit-button:focus{
  outline: none;
}
.search-form__submit-button:active{
  background-color: #545050;
}
.search-form__submit-button:hover{
  text-decoration:underline;
  text-decoration-thickness: 1px;
  cursor: pointer;
}
.search-form__submit-button:focus-visible{
  outline: 1px solid currentColor;
  outline-offset: 1px;
}
/* TR: scroll bar 4 */
.content__card-link:focus{
  outline: none;
  outline-offset: none;
}
.content__card-link:focus-visible {
  outline: 1px solid white;
  outline-offset: 1px;
}
.content__card-link:active{
  background-color: #545050;
}

.content__card-link:hover{
  text-decoration-line: underline;
  text-decoration-color: currentColor;
  text-underline-offset: 1px;
  text-decoration-thickness: 1px;
}












.result {
  grid-area: result;
  /*DI:Попробуй сделать два флекс-контейнера. В одном у тебя будут 1. контейнер для видео и 2. панель управления с инпутами. И второй флекс контейнер будет как раз с тремя элементами: два блока с инпутами и кнопкой. Внутри флексов задай расстояния через gap'ы. Должно все нормально работать тогда
Код на скриншоте же, вроде вообще к правой части относится:)
Для второго блока даже лучше не gap'ами, а через justify-content задавать интервалы, но через gap тоже будет работать, хотя такой вариант не подойдет, если будем делать адаптивную верстку.*/
  display: flex;
  flex-direction: column;
  gap: 16px;

}


/* TR: 4.4.2 Добавьте псевдоэлемент ::after. Белый фон, размер задан, как у чек-бокса. Когда будете стилизовать .search-form__pseudo-checkbox, учитывайте, что в нём появится элемент, который должен оказаться точно по центру. В макете внутренний квадрат включённого чек-бокса на один пиксель меньше самого чекбокса. */
/* .search-form__checkbox-list::after{
  content: "";
  border: 2px solid black;
  background-color: #FFFFFF;
  height: 18px;
  width: 18px;
} */

/* input[type="checkbox"]:checked + search-form__pseudo-checkbox::after{
  content: "";
  border: 2px solid black;
  background-color: #FFFFFF;
  height: 18px;
  width: 18px;

} */

/* TR: 4.4.3 Когда чекбокс активен (псевдокласс :checked) — отобразите внутри псевдоэлемент, который стилизовали в ::after.*/


